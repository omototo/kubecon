{{- if .Values.integration.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: integration-code
  namespace: {{ .Release.Namespace }}
  labels:
    app: integration-service
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
data:
  app.py: |
    import os
    import requests
    from fastapi import FastAPI, HTTPException
    from fastapi.responses import JSONResponse, FileResponse
    from pydantic import BaseModel
    import tempfile
    import uuid
    import logging
    from typing import Optional

    app = FastAPI()
    logging.basicConfig(level=logging.INFO)

    DEEPSEEK_URL = os.environ.get("DEEPSEEK_URL", "http://deepseek-vllm:8000/v1/completions")
    KOKORO_URL = os.environ.get("KOKORO_URL", "http://kokoro-tts:8080/api/tts")

    class ChatRequest(BaseModel):
        input: str

    @app.post("/api/chat")
    async def chat(request: ChatRequest):
        try:
            if not request.input:
                raise HTTPException(status_code=400, detail="No input provided")
                
            # Call DeepSeek for text completion
            logging.info(f"Sending request to DeepSeek: {request.input}")
            
            completion_response = requests.post(
                DEEPSEEK_URL,
                json={
                    "model": "deepseek-ai/DeepSeek-R1-Distill-Llama-8B",
                    "prompt": request.input,
                    "max_tokens": 1000,
                    "temperature": 0.7
                }
            )
            
            if completion_response.status_code != 200:
                raise HTTPException(
                    status_code=500, 
                    detail=f"DeepSeek API error: {completion_response.text}"
                )
                
            completion_result = completion_response.json()
            llm_response = completion_result["choices"][0]["text"]
            
            logging.info(f"DeepSeek response: {llm_response}")
            
            # Call Kokoro TTS to convert text to speech
            logging.info("Sending text to Kokoro TTS")
            
            tts_response = requests.post(
                KOKORO_URL,
                json={
                    "text": llm_response
                }
            )
            
            if tts_response.status_code != 200:
                raise HTTPException(
                    status_code=500,
                    detail={
                        "error": f"TTS API error: {tts_response.text}",
                        "text_response": llm_response
                    }
                )
            
            # Save audio to a temporary file
            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".wav")
            temp_file.write(tts_response.content)
            temp_file.close()
            
            # Return both text and audio file path
            return {
                "text": llm_response,
                "audio_url": f"/api/audio/{os.path.basename(temp_file.name)}"
            }
            
        except Exception as e:
            logging.error(f"Error in chat endpoint: {str(e)}")
            raise HTTPException(status_code=500, detail=str(e))
    
    @app.get("/api/audio/{filename}")
    async def get_audio(filename: str):
        try:
            file_path = os.path.join(tempfile.gettempdir(), filename)
            if not os.path.exists(file_path):
                raise HTTPException(status_code=404, detail="Audio file not found")
            return FileResponse(file_path, media_type="audio/wav")
        except Exception as e:
            raise HTTPException(status_code=404, detail=str(e))

  requirements.txt: |
    fastapi>=0.100.0
    uvicorn>=0.23.0
    pydantic>=2.0.0
    python-multipart>=0.0.6
    requests>=2.28.1
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: integration-service
  namespace: {{ .Release.Namespace }}
  labels:
    app: integration-service
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
spec:
  replicas: {{ .Values.integration.replicas }}
  selector:
    matchLabels:
      app: integration-service
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: integration-service
        release: {{ .Release.Name }}
    spec:
      containers:
      - name: integration
        image: {{ .Values.integration.image }}
        command: 
        - /bin/bash
        - -c
        - "pip install -r /app/requirements.txt && python -m uvicorn app:app --host 0.0.0.0 --port 5000"
        ports:
        - containerPort: 5000
          name: http
        env:
        - name: DEEPSEEK_URL
          value: "http://deepseek-vllm:8000/v1/completions"
        - name: KOKORO_URL
          value: "http://kokoro-tts:8080/api/tts" 
        resources:
          {{- toYaml .Values.integration.resources | nindent 10 }}
        volumeMounts:
        - name: app-code
          mountPath: /app
      volumes:
      - name: app-code
        configMap:
          name: integration-code
---
apiVersion: v1
kind: Service
metadata:
  name: integration-service
  namespace: {{ .Release.Namespace }}
  labels:
    app: integration-service
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
spec:
  type: {{ .Values.integration.service.type }}
  selector:
    app: integration-service
    release: {{ .Release.Name }}
  ports:
  - port: {{ .Values.integration.service.port }}
    targetPort: 5000
    name: http
{{- end }} 
